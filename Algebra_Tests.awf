`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Load Algebra.awf
Load Testing.awf
Def Add_Complex_test : List (Pair (Pair (Pair (Complex Trivial) (Complex Trivial)) (Complex Trivial)) (Complex Trivial)) =
  Test
    (Equal (Compare_Complex Compare_Trivial))
    (x -> Add_Complex Add_Trivial (First x) (Second x))
    (Construct (Pair (Pair (Complex Trivial Trivial) (Complex Trivial Trivial)) (Complex Trivial Trivial)) Empty_List)
Def Add_Logical_test : List (Pair (Pair (Pair Logical Logical) Logical) Logical) =
  Test
    (Equal Compare_Logical)
    (x -> Add_Logical (First x) (Second x))
    (Construct
      (Pair (Pair False False) False)
      (Construct
        (Pair (Pair False True) True)
        (Construct (Pair (Pair True False) True) (Construct (Pair (Pair True True) False) Empty_List))))
Def Add_Int_test : List (Pair (Pair (Pair Int Int) Int) Int) =
  Test (Equal Compare_Int) (x -> Add (First x) (Second x)) (Construct (Pair (Pair 0 0) 0) Empty_List)
Def Equal_Trivial_test : List (Pair (Pair (Pair Trivial Trivial) Logical) Logical) =
  Test
    (Equal Compare_Logical)
    (x -> Equal Compare_Trivial (First x) (Second x))
    (Construct (Pair (Pair Trivial Trivial) True) Empty_List)
Def Inverse_Trivial_test : List (Pair (Pair Trivial (Maybe Trivial)) (Maybe Trivial)) =
  Test
    (Equal (Compare_Maybe Compare_Trivial))
    Inverse_Trivial
    (Construct (Pair Trivial (Wrap Trivial)) Empty_List)
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````