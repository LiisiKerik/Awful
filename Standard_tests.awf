`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
Load Standard.awf
Load Testing.awf
Def Add'_test : List (((Maybe Int * Maybe Int) * Maybe Int) * Maybe Int) =
  Test_2
    Add'
    (List (
      Pair (Pair Nothing Nothing) Nothing,
      Pair (Pair Nothing (Wrap 0)) Nothing,
      Pair (Pair (Wrap 0) Nothing) Nothing,
      Pair (Pair (Wrap -1) (Wrap -1)) (Wrap -2),
      Pair (Pair (Wrap -1) (Wrap 0)) (Wrap -1),
      Pair (Pair (Wrap -1) (Wrap 1)) (Wrap 0),
      Pair (Pair (Wrap 0) (Wrap -1)) (Wrap -1),
      Pair (Pair (Wrap 0) (Wrap 0)) (Wrap 0),
      Pair (Pair (Wrap 0) (Wrap 1)) (Wrap 1),
      Pair (Pair (Wrap 1) (Wrap -1)) (Wrap 0),
      Pair (Pair (Wrap 1) (Wrap 0)) (Wrap 1),
      Pair (Pair (Wrap 1) (Wrap 1)) (Wrap 2)))
Def Brackets_Char_test : List ((Char * List Char) * List Char) = Test_1 Write (Lift (Pair "!" (List (""", "!", """))))
Def Cat_List_test : List (((List Int * List Int) * List Int) * List Int) =
  Test_2
    Cat
    (List (
      Pair (Pair List List) List,
      Pair (Pair List (Lift 0)) (Lift 0),
      Pair (Pair (Lift 0) List) (Lift 0),
      Pair (Pair (Lift 0) (Lift 1)) (List (0, 1))))
Def Cat_Maybe_test : List (((Maybe Int * Maybe Int) * Maybe Int) * Maybe Int) =
  Test_2
    Cat
    (List (
      Pair (Pair Nothing Nothing) Nothing,
      Pair (Pair Nothing (Wrap 0)) (Wrap 0),
      Pair (Pair (Wrap 0) Nothing) (Wrap 0),
      Pair (Pair (Wrap 0) (Wrap 1)) (Wrap 0)))
Def Empty_List_test : Maybe (Pair (List Int) (List Int)) = Test_0 Empty List
Def Empty_Maybe_test : Maybe (Pair (Maybe Int) (Maybe Int)) = Test_0 Empty Nothing
Def Inverse_Logical_test : List ((Logical * Maybe Logical) * Maybe Logical) =
  Test_1 Inverse (Construct_List (Pair False Nothing) (Construct_List (Pair True (Wrap True)) List))
Def Write_Char_test : List ((Char * List Char) * List Char) =
  Test_1
    Write
    (List (
      Pair "\n" (List (""", "\", "n", """)),
      Pair "!" (List (""", "!", """)),
      Pair """ (List (""", """, """)),
      Pair "\" (List (""", "\", """)),
      Pair "n" (List (""", "n", """))))
Def Write_Comparison_test : List ((Comparison * List Char) * List Char) =
  Test_1 Write (List (Pair LT (List ("L", "T")), Pair EQ (List ("E", "Q")), Pair GT (List ("G", "T"))))
Def Write_Int_test : List ((Int * List Char) * List Char) = Test_1 Write (Lift (Pair 0 (Lift "0")))
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````